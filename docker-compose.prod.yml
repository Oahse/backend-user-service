
services:
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - webnet
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s
  kafka:
    image: bitnami/kafka:3.8.0
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092  # <== important for inter-container comm
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
    restart: unless-stopped
    networks:
      - webnet
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: banwee_db
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "banwee_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  userservice:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: userservice
    volumes:
      - ./backend:/usr/src/app  # live code changes
      - /usr/src/app/__pycache__  # exclude pycache from volume mount
    depends_on:
      redis:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - webnet
    env_file:
      - .env.production
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=postgres-db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    # command: celery -A tasks worker --loglevel=info
    volumes:
      - ./backend:/usr/src/app  # live code changes
      - /usr/src/app/__pycache__  # exclude pycache from volume mount
    depends_on:
      redis:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - webnet
    env_file:
      - .env.production
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=postgres-db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: frontend
    networks:
      - webnet
    expose:
      - "80"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # prevent node_modules from being overwritten
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/letsencrypt:ro
      - ./nginx/www:/var/www/html
      - nginx-cache:/var/cache/nginx
    depends_on:
      userservice:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - webnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/html
    networks:
      - webnet
    profiles:
      - ssl
    command: >
      sh -c "
        trap exit TERM;
        while :; do
          certbot renew --webroot -w /var/www/html;
          sleep 12h & wait $${!};
        done;
      "


networks:
  webnet:
    driver: bridge

volumes:
  postgres-db-data:
  redis-data:
  nginx-cache:
