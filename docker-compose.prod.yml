version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - webnet
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s

  users-db:
    image: postgres:16-alpine
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    volumes:
      - users-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  userservice:
    build:
      context: .
      dockerfile: Dockerfile.prod  # Use production Dockerfile here
    command: uvicorn main:app --host 0.0.0.0 --port 8000  # No --reload in prod
    container_name: userservice
    depends_on:
      redis:
        condition: service_healthy
      users-db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - webnet
    env_file:
      - .env
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod  # Also production Dockerfile for celery worker
    container_name: celery_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      users-db:
        condition: service_healthy
    networks:
      - webnet
    env_file:
      - .env
    restart: unless-stopped

  flower:
    image: mher/flower
    container_name: flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    command: >
      flower --broker=${CELERY_BROKER_URL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - webnet

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/html
    depends_on:
      - userservice
    networks:
      - webnet
    restart: unless-stopped
    profiles:
      - production

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/html
    entrypoint: >
      sh -c "
        certbot certonly --webroot -w /var/www/html \
        --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email \
        -d ${DOMAIN_NAME} && nginx -s reload
      "
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    networks:
      - webnet
    expose:
      - "80"
    restart: unless-stopped


networks:
  webnet:
    driver: bridge

volumes:
  users-db-data:
  redis-data:
