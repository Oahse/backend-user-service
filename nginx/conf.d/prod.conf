# nginx Production Configuration
# This configuration is optimized for production environment
# - SSL/HTTPS with security headers
# - Rate limiting and security measures
# - Optimized static file serving

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Upstream services
    upstream backend {
        server userservice:8000;
        keepalive 32;
    }
    
    upstream frontend {
        server frontend:80;
        keepalive 32;
    }
    
    upstream flower {
        server flower:5555;
        keepalive 8;
    }
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name banwee.com www.banwee.com;
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/html;
            try_files $uri =404;
        }
        
        # Redirect all other HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name banwee.com www.banwee.com;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/prod/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/prod/privkey.pem;
        
        # Include SSL parameters
        include /etc/nginx/snippets/ssl-params.conf;
        
        # Include security headers
        include /etc/nginx/snippets/security-headers.conf;
        
        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        
        # Frontend - serve static files
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://frontend;
            include /etc/nginx/snippets/proxy-params.conf;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
                limit_req zone=static burst=100 nodelay;
                proxy_pass http://frontend;
                include /etc/nginx/snippets/proxy-params.conf;
                
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                
                # CORS for fonts and assets
                add_header Access-Control-Allow-Origin "*";
            }
            
            # Cache HTML files for shorter time
            location ~* \.(html|htm)$ {
                proxy_pass http://frontend;
                include /etc/nginx/snippets/proxy-params.conf;
                
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }
        
        # API endpoints with rate limiting
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend/api/v1/;
            include /etc/nginx/snippets/proxy-params.conf;
            
            # API-specific headers
            add_header X-API-Version "1.0" always;
            
            # CORS for API (adjust origins as needed)
            add_header Access-Control-Allow-Origin "https://banwee.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "https://banwee.com";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # Authentication endpoints with stricter rate limiting
        location /api/v1/auth/ {
            limit_req zone=login burst=10 nodelay;
            
            proxy_pass http://backend/api/v1/auth/;
            include /etc/nginx/snippets/proxy-params.conf;
            
            # Additional security for auth endpoints
            add_header X-Frame-Options "DENY" always;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Flower monitoring (restricted access recommended)
        location /flower/ {
            # Uncomment and configure basic auth for production
            # auth_basic "Flower Monitoring";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://flower/;
            include /etc/nginx/snippets/proxy-params.conf;
            
            # Additional security headers for admin interface
            add_header X-Frame-Options "DENY" always;
        }
        
        # WebSocket support (if needed)
        location /ws/ {
            proxy_pass http://backend/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            include /etc/nginx/snippets/proxy-params.conf;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
        
        # Security: Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block common exploit attempts
        location ~* \.(php|asp|aspx|jsp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}