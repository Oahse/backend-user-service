version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - webnet
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s

  users-db:
    image: postgres:16-alpine
    container_name: users-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users_db
    volumes:
      - users-db-data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5432:5432"  # optional in dev
    networks:
      - webnet
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "users_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  userservice:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.dev
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    container_name: userservice
    depends_on:
      redis:
        condition: service_healthy
      users-db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - webnet
    volumes:
      - ./backend:/usr/src/app  # live code changes
      - /usr/src/app/__pycache__  # exclude pycache from volume mount
    env_file:
      - .env.local
    working_dir: /usr/src/app
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=users-db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2

  celery_worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile.dev
    container_name: celery_worker
    command: celery -A tasks worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
      users-db:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app  # live code changes
      - /usr/src/app/__pycache__  # exclude pycache from volume mount
    env_file:
      - .env.local
    working_dir: /usr/src/app
    restart: unless-stopped
    networks:
      - webnet
    environment:
      - POSTGRES_SERVER=users-db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2

  flower:
    image: mher/flower
    container_name: flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    command: flower --broker=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - webnet
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # prevent node_modules from being overwritten
    ports:
      - "5173:5173"
    networks:
      - webnet
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:8000
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

networks:
  webnet:
    driver: bridge

volumes:
  users-db-data:
  redis-data:
